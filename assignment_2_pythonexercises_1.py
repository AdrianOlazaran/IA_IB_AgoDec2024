# -*- coding: utf-8 -*-
"""Assignment-2_PythonExercises_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mmxAeha2WrwYe0sDz89HWxOLRrJetCl3
"""

#Author: Adrián Emiliano Olazarán Guzmán
#Student ID: 1901957
import string
from collections import Counter

def read_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

def count_words(text):

    words = text.translate(str.maketrans('', '', string.punctuation)).split()
    return len(words), words

def count_sentences(text):
    sentences = text.split('.')
    sentences.extend(text.split('!'))
    sentences.extend(text.split('?'))
    return len([s for s in sentences if s.strip() != ''])

def count_paragraphs(text):
    paragraphs = text.split('\n\n')
    return len([p for p in paragraphs if p.strip() != ''])

def average_word_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words) if len(words) > 0 else 0

def most_common_words(words, n=10):
    word_counts = Counter(words)
    return word_counts.most_common(n)

def analyze_text(file_path):
    text = read_file(file_path)

    word_count, words = count_words(text)

    sentence_count = count_sentences(text)

    paragraph_count = count_paragraphs(text)

    avg_word_length = average_word_length(words)

    common_words = most_common_words(words)

    print(f"Word count: {word_count}")
    print(f"Sentence count: {sentence_count}")
    print(f"Paragraph count: {paragraph_count}")
    print(f"Average word length: {avg_word_length:.2f} characters")
    print(f"Most common words: {common_words}")

file_path = 'example_text.txt'
analyze_text(file_path)

#Author: Adrián Emiliano Olazarán Guzmán
#Student ID: 1901957
import random

word_list = ['python', 'biomedical', 'engineering', 'microcontroller', 'hangman', 'transducer']

def choose_word(word_list):
    return random.choice(word_list).lower()

def display_word_progress(word, guessed_letters):
    return ''.join([letter if letter in guessed_letters else '_' for letter in word])

def draw_hangman(incorrect_guesses):
    stages = [
        '''
           -----
           |   |
               |
               |
               |
               |
        =========
        ''',
        '''
           -----
           |   |
           O   |
               |
               |
               |
        =========
        ''',
        '''
           -----
           |   |
           O   |
           |   |
               |
               |
        =========
        ''',
        '''
           -----
           |   |
           O   |
          /|   |
               |
               |
        =========
        ''',
        '''
           -----
           |   |
           O   |
          /|\\  |
               |
               |
        =========
        ''',
        '''
           -----
           |   |
           O   |
          /|\\  |
          /    |
               |
        =========
        ''',
        '''
           -----
           |   |
           O   |
          /|\\  |
          / \\  |
               |
        =========
        '''
    ]
    print(stages[incorrect_guesses])


def hangman():

    word_to_guess = choose_word(word_list)
    guessed_letters = set()
    incorrect_guesses = 0
    max_attempts = 6

    print("Welcome to Hangman!")

    while incorrect_guesses < max_attempts:
        word_progress = display_word_progress(word_to_guess, guessed_letters)
        print(f"Word: {word_progress}")
        print(f"Incorrect guesses left: {max_attempts - incorrect_guesses}")

        draw_hangman(incorrect_guesses)

        guess = input("Guess a letter: ").lower()

        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a valid letter.")
            continue

        if guess in guessed_letters:
            print(f"You already guessed '{guess}'. Try again.")
            continue

        guessed_letters.add(guess)

        if guess in word_to_guess:
            print(f"Good guess! '{guess}' is in the word.")
        else:
            incorrect_guesses += 1
            print(f"Sorry, '{guess}' is not in the word. You have {max_attempts - incorrect_guesses} guesses left.")

        if set(word_to_guess) <= guessed_letters:
            print(f"Congratulations! You guessed the word '{word_to_guess}'. You win!")
            break
    else:
        draw_hangman(incorrect_guesses)
        print(f"Game over! The word was '{word_to_guess}'. Better luck next time!")

if __name__ == '__main__':
    hangman()

#Author: Adrián Emiliano Olazarán Guzmán
#Student ID: 1901957
import random

def number_guessing_game():
    target_number = random.randint(1, 100)

    print("Welcome to the Number Guessing Game!")
    print("I have selected a number between 1 and 100. Try to guess it!")

    while True:
        try:
            guess = int(input("Enter your guess: "))
        except ValueError:
            print("Please enter a valid number.")
            continue

        if guess < 1 or guess > 100:
            print("The number must be between 1 and 100. Try again.")
            continue

        if guess < target_number:
            print("Too low. Try again.")
        elif guess > target_number:
            print("Too high. Try again.")
        else:
            print(f"Congratulations! You guessed the correct number: {target_number}")
            break

if __name__ == "__main__":
    number_guessing_game()

